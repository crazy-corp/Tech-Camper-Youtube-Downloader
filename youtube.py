from  pytube import YouTube
import PySimpleGUI as sg
import time
import os
import subprocess

previousprogress = 0
ico=b''
def on_progress(stream, chunk, bytes_remaining):
    global previousprogress
    total_size = stream.filesize
    bytes_downloaded = total_size - bytes_remaining 

    liveprogress = (int)(bytes_downloaded / total_size * 100)
    if liveprogress > previousprogress:
        previousprogress = liveprogress
        window['progbar'].update_bar(liveprogress)
#python -m pip install git+https://github.com/nficano/pytube
sg.theme('Black')	# Add a touch of color
# All the stuff inside your window.
layout = [[sg.Text('Enter The Link'), sg.InputText()],
            [sg.Button('Ok'), sg.Button('Cancel')] ]

# Create the Window
window = sg.Window('Youtube Downloader - TechCamper', layout,icon=ico)
# Event Loop to process "events" and get the "values" of the inputs
while True:
    event, link = window.read()
    if event == sg.WIN_CLOSED or event == 'Cancel'or event =='Ok':	# if user closes window or clicks cancel
        window.close()
    yt=YouTube(link[0])
    Available_streams=yt.streams.order_by('resolution').desc()
    b=yt.streams.filter(progressive=True).order_by('resolution').desc()
    c=yt.streams.filter(only_audio=True)  
    layout = [[sg.Text('All Available Streams (post process required)')],[sg.Listbox(values=Available_streams, size=(60, 8))],
    [sg.Text('Video+Audio (Fastest)')],[sg.Listbox(values=b, size=(60, 3))],[sg.Text('Only Audio')],[sg.Listbox(values=c, size=(60, 3))],
          [sg.Text('Enter itag'), sg.InputText()],
            [sg.Button('Ok'), sg.Button('Cancel')],[sg.Text('Downloading progress')],
          [sg.ProgressBar(100, orientation='h', size=(40, 20), key='progbar')]]
    window = sg.Window('Youtube Downloader - TechCamper', layout,icon=ico)
    event,itag = window.read()
    yt.register_on_progress_callback(on_progress)
    file=yt.streams.get_by_itag(itag[3])
    if file not in b and file not in c:
        file.download(filename="TempMp4")
        c.first().download(filename="TemMp3")
        sg.Print('Post Process', do_not_reroute_stdout=False)
        x=yt.title
        x=x.split("|")
        x=x[0]
        x=x.replace(" ","_")
        y=x+".mp4"
        try:
            cmd="ffmpeg.exe -i TempMp4.mp4 -i TemMp3.mp4 -c copy "+y
            subprocess.call(cmd, shell=True)                                    
            print('Mixing Done')
            os.remove("TempMp4.mp4")
            os.remove("TemMp3.mp4")
        except:
            try:
                cmd="ffmpeg.exe -i TempMp4.webm -i TemMp3.mp4 -c copy "+y
                subprocess.call(cmd, shell=True)                                    
                print('Mixing Done')
                os.remove("TempMp4.webm")
                os.remove("TemMp3.mp4")
            except:
                try:
                    cmd="ffmpeg.exe -i TempMp4.mp4 -i TemMp3.webm -c copy "+y
                    subprocess.call(cmd, shell=True)                                    
                    print('Mixing Done')
                    os.remove("TempMp4.mp4")
                    os.remove("TemMp3.webm")
                except:
                    cmd="ffmpeg.exe -i TempMp4.webm -i TemMp3.webm -c copy "+y
                    subprocess.call(cmd, shell=True)                                    
                    print('Mixing Done')
                    os.remove("TempMp4.webm")
                    os.remove("TemMp3.webm")
    else:
        yt.streams.get_by_itag(itag[3]).download()
    sg.PopupNonBlocking("Downloaded into app Directory",icon=ico)
    time.sleep(2)
    if event == sg.WIN_CLOSED or event == 'Cancel'or event =='Ok':	# if user closes window or clicks cancel
        break
window.close()